x = seq(1,1.1,len=20)
n = 3
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
A
xbar = 1:n
b = A %*% xbar
soln = solve(t(A) %*% A, t(A) %*% b)
print(soln)
xbar
x = seq(1,1.1,len=20)
n = 4
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
A
xbar = 1:n
b = A %*% xbar
soln = solve(t(A) %*% A, t(A) %*% b)
print(soln)
xbar
x = seq(1,1.1,len=20)
n = 5
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
A
xbar = 1:n
b = A %*% xbar
soln = solve(t(A) %*% A, t(A) %*% b)
print(soln)
xbar
QR <- qr(A)
Q <- QR[1]
R <- QR[2]
Q%*%R - A
Q
R
QR
qr
QR
QR$qr
QR$qr[1]
QR$qr$q
QR <- qr(A)$qr
Q <- lower.tri(QR)
R <- upper.tri(QR,diag=TRUE)
Q
Q <- QR[lower.tri(QR)]
R <- QR[upper.tri(QR,diag=TRUE)]
Q
R
QR <- qr(A)
(R.bar=qr.R(QR,complete=TRUE))
(Q.bar=qr.Q(QR,complete=TRUE))
Q.bar%*%R.bar
QR <- qr(A)
R.bar <- qr.R(QR,complete=TRUE)
Q.bar <- qr.Q(QR,complete=TRUE)
Q.bar%*%R.bar
Q.bar%*%R.bar- A
max(Q.bar%*%R.bar- A)
min(Q.bar%*%R.bar- A)
soln = solve(R, t(Q) %*% b)
print(soln)
x = seq(1,1.1,len=20)
n = 5
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
xbar = 1:n
b = A %*% xbar
# Commenting this out to replace it with QR solution!
# soln = solve(t(A) %*% A, t(A) %*% b)
# print(soln)
QR <- qr(A)
R.bar <- qr.R(QR,complete=TRUE)
Q.bar <- qr.Q(QR,complete=TRUE)
soln = solve(R, t(Q) %*% b)
dim(Q)
(Q.bar <- qr.Q(QR,complete=TRUE))
(R.bar <- qr.R(QR,complete=TRUE))
(Q.bar <- qr.Q(QR,complete=TRUE))
Q
soln = solve(R, t(Q) %*% b)
QR <- qr(A)
R.bar <- qr.R(QR,complete=FALSE)
Q.bar <- qr.Q(QR,complete=FALSE)
Q
soln = solve(R, t(Q) %*% b)
b = A %*% xbar
QR <- qr(A)
R.bar <- qr.R(QR,complete=FALSE)
Q.bar <- qr.Q(QR,complete=FALSE)
Q
Q.bar <- qr.Q(QR,complete=FALSE)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(Q, t(Q.bar)%*%b)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(R, t(Q)%*%b)
print(soln)
QR <- qr(A)
R <- qr.R(QR,complete=TRUE)
Q <- qr.Q(QR,complete=TRUE)
soln = solve(R, t(Q)%*%b)
QR <- qr(A)
R <- qr.R(QR,complete=TRUE)
Q <- qr.Q(QR,complete=TRUE)
soln = solve(R, t(Q)%*%b)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(R, t(Q)%*%b)
print(soln) #
# Exam 2, Problem 3
#
# I can't get this least squares problem to solve
# it works when n = 5 but not when n = 6 as needed
x = seq(1,1.1,len=20)
n = 7
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
xbar = 1:n
b = A %*% xbar
# Commenting this out to replace it with QR solution for part "Biii"
# soln = solve(t(A) %*% A, t(A) %*% b)
# print(soln)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(R, t(Q)%*%b)
print(soln)
# Exam 2, Problem 3
#
# I can't get this least squares problem to solve
# it works when n = 5 but not when n = 6 as needed
x = seq(1,1.1,len=20)
n = 6
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
xbar = 1:n
b = A %*% xbar
# Commenting this out to replace it with QR solution for part "Biii"
# soln = solve(t(A) %*% A, t(A) %*% b)
# print(soln)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(R, t(Q)%*%b)
print(soln)
# Exam 2, Problem 3
#
# I can't get this least squares problem to solve
# it works when n = 5 but not when n = 6 as needed
x = seq(1,1.1,len=20)
n = 5
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
xbar = 1:n
b = A %*% xbar
# Commenting this out to replace it with QR solution for part "Biii"
# soln = solve(t(A) %*% A, t(A) %*% b)
# print(soln)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(R, t(Q)%*%b)
print(soln)
# Exam 2, Problem 3
#
# I can't get this least squares problem to solve
# it works when n = 5 but not when n = 6 as needed
x = seq(1,1.1,len=20)
n = 6
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
xbar = 1:n
b = A %*% xbar
# Commenting this out to replace it with QR solution for part "Biii"
# soln = solve(t(A) %*% A, t(A) %*% b)
# print(soln)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(R, t(Q)%*%b)
print(soln)
A%*%soln-b
b
# Exam 2, Problem 3
#
# I can't get this least squares problem to solve
# it works when n = 5 but not when n = 6 as needed
x = seq(1,1.1,len=20)
n = 100
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
xbar = 1:n
b = A %*% xbar
# Commenting this out to replace it with QR solution for part "Biii"
# soln = solve(t(A) %*% A, t(A) %*% b)
# print(soln)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(R, t(Q)%*%b)
# Exam 2, Problem 3
#
# I can't get this least squares problem to solve
# it works when n = 5 but not when n = 6 as needed
x = seq(1,1.1,len=20)
n = 5
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
xbar = 1:n
b = A %*% xbar
# Commenting this out to replace it with QR solution for part "Biii"
# soln = solve(t(A) %*% A, t(A) %*% b)
# print(soln)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(R, t(Q)%*%b)
print(soln)
# Exam 2, Problem 3
#
# I can't get this least squares problem to solve
# it works when n = 5 but not when n = 6 as needed
x = seq(1,1.1,len=20)
n = 6
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
xbar = 1:n
b = A %*% xbar
# Commenting this out to replace it with QR solution for part "Biii"
# soln = solve(t(A) %*% A, t(A) %*% b)
# print(soln)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(R, t(Q)%*%b)
print(soln)
A%*%soln -b
max(A%*%soln -b)
# Exam 2, Problem 3
#
# I can't get this least squares problem to solve
# it works when n = 5 but not when n = 6 as needed
x = seq(1,1.1,len=20)
n = 5
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
xbar = 1:n
b = A %*% xbar
# Commenting this out to replace it with QR solution for part "Biii"
# soln = solve(t(A) %*% A, t(A) %*% b)
# print(soln)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(R, t(Q)%*%b)
print(soln)
max(A%*%soln -b)
# ... wtf is happening for n=6....
# Exam 2, Problem 3
#
# I can't get this least squares problem to solve
# it works when n = 5 but not when n = 6 as needed
x = seq(1,1.1,len=20)
n = 7
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
xbar = 1:n
b = A %*% xbar
# Commenting this out to replace it with QR solution for part "Biii"
# soln = solve(t(A) %*% A, t(A) %*% b)
# print(soln)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(R, t(Q)%*%b)
print(soln)
max(A%*%soln -b)
# ... wtf is happening for n=6....
x = seq(1,1.1,len=20)
n = 7
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
xbar = 1:n
b = A %*% xbar
# Commenting this out to replace it with QR solution for part "Biii"
# soln = solve(t(A) %*% A, t(A) %*% b)
# print(soln)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(R, t(Q)%*%b)
print(soln)
max(A%*%soln -b)
SAT = mosaicData::SAT[,c(2,3,4,5,8)]
SAT.S = scale(SAT)
SAT
SAT.S
SAT
SAT.S
A=matrix(SAT.S[,1:4]) #Input the appropriate matrix here
A
SAT.S[,1:4]
A=matrix(SAT.S[,1:4],50,4) #Input the appropriate matrix here
A
A - SAT.S
A - SAT.S[,1:4]
A=matrix(SAT.S[,1:4],50,4) #Input the appropriate matrix here
b=c(SAT.S[,5]) #Input the appropriate vector here
sol <- solve(t(A)%*%A, t(A)%*%b)
#Uncomment below
print(sol)
# part A
A <- cbind(c(1,-3,7,2),c(2,-8,9,3))
P <- A%*%solve(t(A)%*%A)%*%t(A)
P
# part B
v1 <- c(1,-3,7,2)
v2 <- c(2,-8,9,3)
q1 <- v1/vnorm(v1)
y2 <- v2 - q1%*%t(q1)%*%v2
q2 <- y2/vnorm(y2)
v3 <- (c(0,0,1,0))
v4 <- (c(0,0,0,1))
y3 <- v3 - q1%*%t(q1)%*%v3 - q2%*%t(q2)%*%v3
q3 <- y3/vnorm(y3)
y4 <- v4 - q1%*%t(q1)%*%v4- q2%*%t(q2)%*%v4 - q3%*%t(q3)%*%v4
q4 <- y4/vnorm(y4)
q3
q4
# part c
W <- cbind(q3,q4)
p_o <- W%*%solve(t(W)%*%W)%*%t(W)
p_o
b <- c(2,0,1,5)
t(A)%*%b # should not be zero
t(A)%*%(p_o%*%b) # should be zero
# part d
P +  p_o # it's the identity
# part e
xstar <- c(3,1)
bhat <- A%*%xstar
bhat
b <- c(5,-17,30,10)
solve(t(A)%*%A,t(A)%*%b) # c(3,1) as we'd hoped
vnorm(b-P%*%b) # within rounding errors of 1!
bhat
q1 <- v1/vnorm(v1)
q2 <- y2/vnorm(y2)
q1
q2
QR <- qr(A)
x = seq(1,1.1,len=20)
n = 9
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
xbar = 1:n
b = A %*% xbar
# Commenting this out to replace it with QR solution for part "Biii"
# soln = solve(t(A) %*% A, t(A) %*% b)
# print(soln)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(R, t(Q)%*%b)
# for part biv
vnorm(b-A%*%soln)
# Exam 2, Problem 3
#
# I can't get this least squares problem to solve
# it works when n = 5 but not when n = 6 as needed
x = seq(1,1.1,len=20)
n = 4
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
xbar = 1:n
b = A %*% xbar
# Commenting this out to replace it with QR solution for part "Biii"
# soln = solve(t(A) %*% A, t(A) %*% b)
# print(soln)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(R, t(Q)%*%b)
# for part biv
vnorm(b-A%*%soln)
# Exam 2, Problem 3
#
# I can't get this least squares problem to solve
# it works when n = 5 but not when n = 6 as needed
x = seq(1,1.1,len=20)
n = 8
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
xbar = 1:n
b = A %*% xbar
# Commenting this out to replace it with QR solution for part "Biii"
# soln = solve(t(A) %*% A, t(A) %*% b)
# print(soln)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(R, t(Q)%*%b)
# for part biv
vnorm(b-A%*%soln)
# Exam 2, Problem 3
#
# I can't get this least squares problem to solve
# it works when n = 5 but not when n = 6 as needed
x = seq(1,1.1,len=20)
n = 10
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
xbar = 1:n
b = A %*% xbar
# Commenting this out to replace it with QR solution for part "Biii"
# soln = solve(t(A) %*% A, t(A) %*% b)
# print(soln)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(R, t(Q)%*%b)
# Exam 2, Problem 3
#
# I can't get this least squares problem to solve
# it works when n = 5 but not when n = 6 as needed
x = seq(1,1.1,len=20)
n = 9
A = matrix(nrow=length(x),ncol=n)
for ( i in 1:n ){
A[,i] = x^(i-1)
}
xbar = 1:n
b = A %*% xbar
# Commenting this out to replace it with QR solution for part "Biii"
# soln = solve(t(A) %*% A, t(A) %*% b)
# print(soln)
QR <- qr(A)
R <- qr.R(QR,complete=FALSE)
Q <- qr.Q(QR,complete=FALSE)
soln = solve(R, t(Q)%*%b)
# for part biv
vnorm(b-A%*%soln)
setwd("~/MATHCOMP479/Project/Note Networks")
library(tidyverse)
# ------------------ just working on tune stats----
tune_stats <-  read_csv("Tune Stats.csv", col_names = TRUE)
# ------------------- overall tune networks
idiom_stats <- read_csv("Idiom Stats.csv")
idiom_stats
# ----------------------- diving things up by idiom ----
tune_info <- read_csv("~/MATHCOMP479/Project/TuneInfo.csv")
full_info <- inner_join(tune_info, tune_stats, join_by(Name == name))
full_info %>% group_by(Idiom) %>% summarise(mean(clustcoef))
full_info %>% filter(connected) %>% group_by(Idiom) %>% summarise(mean(diameter))
full_info %>% filter(connected) %>% group_by(Idiom) %>% summarise(mean(avgpathlen))
hist(sort(full_info$diameter[full_info$connected]))
full_info %>% filter(NumParts > 0 & NumParts <= 6) %>% group_by(NumParts) %>% summarise(mean(clustcoef))
hist(full_info$NumParts[full_info$NumParts > 0 & full_info$NumParts <= 6])
# -------------------------------------------------------
full_info %>% group_by(Idiom) %>% summarise(mean(clustcoef))
full_info %>% filter(connected) %>% group_by(Idiom) %>% summarise(mean(avgpathlen))
full_info %>% group_by(Idiom) %>% summarise(mean(clustcoef))
# ------------------- overall tune networks
idiom_stats <- read_csv("Idiom Stats.csv")
idiom_stats
full_info %>% filter(connected) %>% group_by(Idiom) %>% summarise(mean(diameter))
idiom_stats
full_info %>% filter(connected) %>% group_by(Idiom) %>% summarise(mean(avgpathlen))
full_info %>% group_by(Idiom) %>% summarise(mean(clustcoef), count())
full_info %>% group_by(Idiom) %>% summarise(mean(clustcoef), n())
